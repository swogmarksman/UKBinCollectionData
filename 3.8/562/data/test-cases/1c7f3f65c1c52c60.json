{"uid":"1c7f3f65c1c52c60","name":"Validate Council Output [NorthTynesideCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"5f199ed7bccd24a997d0abd44066cd21","time":{"start":1677462485696,"stop":1677462487578,"duration":1882},"status":"failed","statusMessage":"NotImplementedError: Country 'GB' does not have subdivision 'ENGLAND'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4d608fc1f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4d52f03e80>, 'council': 'NorthTynesideCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthTynesideCouncil.py:183: in parse_data\n    if is_holiday(item_as_date, Region.ENGLAND):\nuk_bin_collection/uk_bin_collection/common.py:129: in is_holiday\n    uk_holidays = holidays.country_holidays(\"GB\", subdiv=subdiv)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/holidays/utils.py:185: in country_holidays\n    return getattr(countries, country)(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/holidays/countries/united_kingdom.py:52: in __init__\n    HolidayBase.__init__(self, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = holidays.country_holidays('GB', subdiv='ENGLAND'), years = None\nexpand = True, observed = True, subdiv = 'ENGLAND', prov = None, state = None\nlanguage = None\n\n    def __init__(\n        self,\n        years: Optional[Union[int, Iterable[int]]] = None,\n        expand: bool = True,\n        observed: bool = True,\n        subdiv: Optional[str] = None,\n        prov: Optional[str] = None,  # Deprecated.\n        state: Optional[str] = None,  # Deprecated.\n        language: Optional[str] = None,\n    ) -> None:\n        \"\"\"\n        :param years:\n            The year(s) to pre-calculate public holidays for at instantiation.\n    \n        :param expand:\n            Whether the entire year is calculated when one date from that year\n            is requested.\n    \n        :param observed:\n            Whether to include the dates when public holiday are observed\n            (e.g. a holiday falling on a Sunday being observed the\n            following Monday). This doesn't work for all countries.\n    \n        :param subdiv:\n            The subdivision (e.g. state or province); not implemented for all\n            countries (see documentation).\n    \n        :param prov:\n            *deprecated* use subdiv instead.\n    \n        :param state:\n            *deprecated* use subdiv instead.\n    \n        :param language:\n            The language which the returned holiday names will be translated\n            into. It must be an ISO 639-1 (2-letter) language code. If the\n            language translation is not supported the original holiday names\n            will be used.\n    \n        :return:\n            A :class:`HolidayBase` object matching the **country**.\n        \"\"\"\n        super().__init__()\n    \n        self.expand = expand\n        self.language = language.lower() if language else None\n        self.observed = observed\n        self.subdiv = subdiv or prov or state\n    \n        self.tr = gettext  # Default translation method.\n    \n        if prov or state:\n            warnings.warn(\n                \"Arguments prov and state are deprecated, use subdiv=\"\n                f\"'{prov or state}' instead.\",\n                DeprecationWarning,\n            )\n    \n        if not isinstance(self, HolidaySum):\n            if (\n                subdiv\n                and subdiv\n                not in self.subdivisions + self._deprecated_subdivisions\n            ):\n                if hasattr(self, \"market\"):\n                    error = (\n                        f\"Market '{self.market}' does not have subdivision \"\n                        f\"'{subdiv}'\"\n                    )\n                else:\n                    error = (\n                        f\"Country '{self.country}' does not have subdivision \"\n                        f\"'{subdiv}'\"\n                    )\n>               raise NotImplementedError(error)\nE               NotImplementedError: Country 'GB' does not have subdivision 'ENGLAND'\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/holidays/holiday_base.py:284: NotImplementedError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"NotImplementedError: Country 'GB' does not have subdivision 'ENGLAND'","statusTrace":"fixturefunc = <function scrape_step at 0x7f4d608fc1f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[NorthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f4d52f03e80>, 'council': 'NorthTynesideCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/NorthTynesideCouncil.py:183: in parse_data\n    if is_holiday(item_as_date, Region.ENGLAND):\nuk_bin_collection/uk_bin_collection/common.py:129: in is_holiday\n    uk_holidays = holidays.country_holidays(\"GB\", subdiv=subdiv)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/holidays/utils.py:185: in country_holidays\n    return getattr(countries, country)(\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/holidays/countries/united_kingdom.py:52: in __init__\n    HolidayBase.__init__(self, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = holidays.country_holidays('GB', subdiv='ENGLAND'), years = None\nexpand = True, observed = True, subdiv = 'ENGLAND', prov = None, state = None\nlanguage = None\n\n    def __init__(\n        self,\n        years: Optional[Union[int, Iterable[int]]] = None,\n        expand: bool = True,\n        observed: bool = True,\n        subdiv: Optional[str] = None,\n        prov: Optional[str] = None,  # Deprecated.\n        state: Optional[str] = None,  # Deprecated.\n        language: Optional[str] = None,\n    ) -> None:\n        \"\"\"\n        :param years:\n            The year(s) to pre-calculate public holidays for at instantiation.\n    \n        :param expand:\n            Whether the entire year is calculated when one date from that year\n            is requested.\n    \n        :param observed:\n            Whether to include the dates when public holiday are observed\n            (e.g. a holiday falling on a Sunday being observed the\n            following Monday). This doesn't work for all countries.\n    \n        :param subdiv:\n            The subdivision (e.g. state or province); not implemented for all\n            countries (see documentation).\n    \n        :param prov:\n            *deprecated* use subdiv instead.\n    \n        :param state:\n            *deprecated* use subdiv instead.\n    \n        :param language:\n            The language which the returned holiday names will be translated\n            into. It must be an ISO 639-1 (2-letter) language code. If the\n            language translation is not supported the original holiday names\n            will be used.\n    \n        :return:\n            A :class:`HolidayBase` object matching the **country**.\n        \"\"\"\n        super().__init__()\n    \n        self.expand = expand\n        self.language = language.lower() if language else None\n        self.observed = observed\n        self.subdiv = subdiv or prov or state\n    \n        self.tr = gettext  # Default translation method.\n    \n        if prov or state:\n            warnings.warn(\n                \"Arguments prov and state are deprecated, use subdiv=\"\n                f\"'{prov or state}' instead.\",\n                DeprecationWarning,\n            )\n    \n        if not isinstance(self, HolidaySum):\n            if (\n                subdiv\n                and subdiv\n                not in self.subdivisions + self._deprecated_subdivisions\n            ):\n                if hasattr(self, \"market\"):\n                    error = (\n                        f\"Market '{self.market}' does not have subdivision \"\n                        f\"'{subdiv}'\"\n                    )\n                else:\n                    error = (\n                        f\"Country '{self.country}' does not have subdivision \"\n                        f\"'{subdiv}'\"\n                    )\n>               raise NotImplementedError(error)\nE               NotImplementedError: Country 'GB' does not have subdivision 'ENGLAND'\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/holidays/holiday_base.py:284: NotImplementedError","steps":[{"name":"Given the council: NorthTynesideCouncil","time":{"start":1677462485696,"stop":1677462485697,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from NorthTynesideCouncil","time":{"start":1677462485697,"stop":1677462487578,"duration":1881},"status":"failed","statusMessage":"Country 'GB' does not have subdivision 'ENGLAND'","statusTrace":"NotImplementedError: Country 'GB' does not have subdivision 'ENGLAND'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az566-808"},{"name":"thread","value":"2620-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"1c7f3f65c1c52c60.json","parameterValues":[]}