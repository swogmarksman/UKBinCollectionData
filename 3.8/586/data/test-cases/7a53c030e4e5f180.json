{"uid":"7a53c030e4e5f180","name":"Validate Council Output [StHelensBC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aefb4666f5cfa7265d9db53c16df38b6","time":{"start":1677894418728,"stop":1677894419425,"duration":697},"status":"failed","statusMessage":"ValueError: invalid literal for int() with base 10: 'not'","statusTrace":"fixturefunc = <function scrape_step at 0x7f7c27ce21f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7c1e60cd90>, 'council': 'StHelensBC'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StHelensBC.CouncilClass object at 0x7f7c1e72f580>\npage = <Response [200]>, kwargs = {'paon': None, 'postcode': None, 'uprn': None}\nsoup = <!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"/>\n<meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"/...ecure.sthelens.net/website/sthelenscouncilfiles.nsf/Lookup/bootstrap3menu/$file/menu.min.js\"></script>\n</body>\n</html>\n\ndata = {'bins': [{'collectionDate': '10/03/2023', 'type': 'Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)'}, ...2023', 'type': 'Green Bin (garden waste)'}, {'collectionDate': '07/04/2023', 'type': 'Green Bin (garden waste)'}, ...]}\nresults = []\ntable = <table class=\"multitable\"><caption>Collection dates for <span>15 THE MEADS,</span> <span>ECCLESTON PARK,</span> <span>...i 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr></tbody></table>\ntable_body = <tbody><tr><th scope=\"row\"><b>Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)</b></th><td data-title=\"N..._col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr></tbody>\nrows = [<tr><th scope=\"row\"><b>Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)</b></th><td data-title=\"Next\"><...=\"table_col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr>]\nrow = <tr><th scope=\"row\"><b>Brown Bin (non-recyclable waste)</b></th><td data-title=\"Next\"><div class=\"table_col\">Fri 17 Ma...s=\"table_col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        results = []\n        table = soup.find(\"table\", {\"class\": \"multitable\"})\n        table_body = table.find(\"tbody\")\n        rows = table_body.find_all(\"tr\")\n    \n        for row in rows:\n            row_values = [text.text for text in row.contents]\n            bin_type = row_values[0]\n            for i in range(1, 4):\n                # Convert date to list and remove day part\n                date_as_list = row_values[i].split(\" \")\n                date_as_list.pop(0)\n    \n                # Add extra padding if the number is 1-9 -> 01-09\n>               if int(date_as_list[0]) < 10:\nE               ValueError: invalid literal for int() with base 10: 'not'\n\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:35: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: invalid literal for int() with base 10: 'not'","statusTrace":"fixturefunc = <function scrape_step at 0x7f7c27ce21f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f7c1e60cd90>, 'council': 'StHelensBC'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StHelensBC.CouncilClass object at 0x7f7c1e72f580>\npage = <Response [200]>, kwargs = {'paon': None, 'postcode': None, 'uprn': None}\nsoup = <!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"/>\n<meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"/...ecure.sthelens.net/website/sthelenscouncilfiles.nsf/Lookup/bootstrap3menu/$file/menu.min.js\"></script>\n</body>\n</html>\n\ndata = {'bins': [{'collectionDate': '10/03/2023', 'type': 'Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)'}, ...2023', 'type': 'Green Bin (garden waste)'}, {'collectionDate': '07/04/2023', 'type': 'Green Bin (garden waste)'}, ...]}\nresults = []\ntable = <table class=\"multitable\"><caption>Collection dates for <span>15 THE MEADS,</span> <span>ECCLESTON PARK,</span> <span>...i 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr></tbody></table>\ntable_body = <tbody><tr><th scope=\"row\"><b>Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)</b></th><td data-title=\"N..._col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr></tbody>\nrows = [<tr><th scope=\"row\"><b>Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)</b></th><td data-title=\"Next\"><...=\"table_col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr>]\nrow = <tr><th scope=\"row\"><b>Brown Bin (non-recyclable waste)</b></th><td data-title=\"Next\"><div class=\"table_col\">Fri 17 Ma...s=\"table_col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        results = []\n        table = soup.find(\"table\", {\"class\": \"multitable\"})\n        table_body = table.find(\"tbody\")\n        rows = table_body.find_all(\"tr\")\n    \n        for row in rows:\n            row_values = [text.text for text in row.contents]\n            bin_type = row_values[0]\n            for i in range(1, 4):\n                # Convert date to list and remove day part\n                date_as_list = row_values[i].split(\" \")\n                date_as_list.pop(0)\n    \n                # Add extra padding if the number is 1-9 -> 01-09\n>               if int(date_as_list[0]) < 10:\nE               ValueError: invalid literal for int() with base 10: 'not'\n\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:35: ValueError","steps":[{"name":"Given the council: StHelensBC","time":{"start":1677894418728,"stop":1677894418729,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from StHelensBC","time":{"start":1677894418729,"stop":1677894419425,"duration":696},"status":"failed","statusMessage":"invalid literal for int() with base 10: 'not'","statusTrace":"ValueError: invalid literal for int() with base 10: 'not'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az280-518"},{"name":"thread","value":"2668-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7a53c030e4e5f180.json","parameterValues":[]}