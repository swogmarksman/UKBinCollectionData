{"uid":"31392bf8294708db","name":"Validate Council Output [BromleyBoroughCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"7f3dc7acf0fc90eded39e25c4ed3bb60","time":{"start":1677707392600,"stop":1677707401033,"duration":8433},"status":"failed","statusMessage":"TypeError: parse_data() got an unexpected keyword argument 'postcode'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa1a12441f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa193c01130>, 'council': 'BromleyBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BromleyBoroughCouncil.CouncilClass object at 0x7fa193bef550>\naddress_url = 'https://recyclingservices.bromley.gov.uk/property/100020380703'\nkwargs = {'paon': None, 'postcode': None, 'skip_get_url': None, 'uprn': '100020380703'}\nthis_postcode = None, this_paon = None, this_uprn = '100020380703'\nskip_get_url = None, page = <Response [200]>\n\n    def template_method(self, address_url: str, **kwargs) -> None:  # pragma: no cover\n        \"\"\"The main template method that is constructed\n    \n        Keyword arguments:\n        address_url -- the url to get the data from\n        \"\"\"\n        this_postcode = kwargs.get(\"postcode\", None)\n        this_paon = kwargs.get(\"paon\", None)\n        this_uprn = kwargs.get(\"uprn\", None)\n        skip_get_url = kwargs.get(\"skip_get_url\", None)\n        if (\n            not skip_get_url or skip_get_url is False\n        ):  # we will not use the generic way to get data - needs a get data in the council class itself\n            page = self.get_data(address_url)\n>           bin_data_dict = self.parse_data(\n                page, postcode=this_postcode, paon=this_paon, uprn=this_uprn\n            )\nE           TypeError: parse_data() got an unexpected keyword argument 'postcode'\n\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"TypeError: parse_data() got an unexpected keyword argument 'postcode'","statusTrace":"fixturefunc = <function scrape_step at 0x7fa1a12441f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BromleyBoroughCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa193c01130>, 'council': 'BromleyBoroughCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BromleyBoroughCouncil.CouncilClass object at 0x7fa193bef550>\naddress_url = 'https://recyclingservices.bromley.gov.uk/property/100020380703'\nkwargs = {'paon': None, 'postcode': None, 'skip_get_url': None, 'uprn': '100020380703'}\nthis_postcode = None, this_paon = None, this_uprn = '100020380703'\nskip_get_url = None, page = <Response [200]>\n\n    def template_method(self, address_url: str, **kwargs) -> None:  # pragma: no cover\n        \"\"\"The main template method that is constructed\n    \n        Keyword arguments:\n        address_url -- the url to get the data from\n        \"\"\"\n        this_postcode = kwargs.get(\"postcode\", None)\n        this_paon = kwargs.get(\"paon\", None)\n        this_uprn = kwargs.get(\"uprn\", None)\n        skip_get_url = kwargs.get(\"skip_get_url\", None)\n        if (\n            not skip_get_url or skip_get_url is False\n        ):  # we will not use the generic way to get data - needs a get data in the council class itself\n            page = self.get_data(address_url)\n>           bin_data_dict = self.parse_data(\n                page, postcode=this_postcode, paon=this_paon, uprn=this_uprn\n            )\nE           TypeError: parse_data() got an unexpected keyword argument 'postcode'\n\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: TypeError","steps":[{"name":"Given the council: BromleyBoroughCouncil","time":{"start":1677707392600,"stop":1677707392601,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from BromleyBoroughCouncil","time":{"start":1677707392601,"stop":1677707401033,"duration":8432},"status":"failed","statusMessage":"parse_data() got an unexpected keyword argument 'postcode'","statusTrace":"TypeError: parse_data() got an unexpected keyword argument 'postcode'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az174-277"},{"name":"thread","value":"2649-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"31392bf8294708db.json","parameterValues":[]}