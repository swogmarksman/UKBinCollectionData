{"uid":"aafbf6d29ea00377","name":"Validate Council Output [WakefieldCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"532d749d88b4b8fb0bc694b350a3d71a","time":{"start":1677458601596,"stop":1677458607459,"duration":5863},"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7ff8d6ae71f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WakefieldCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff8cd3f4fa0>, 'council': 'WakefieldCityCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <WakefieldCityCouncil.CouncilClass object at 0x7ff8cd5325b0>\npage = <Response [200]>, kwargs = {'paon': None, 'postcode': None, 'uprn': None}\nuser_uprn = None\nheaders = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\nparams = {'uprn': None}\ns = <requests.sessions.Session object at 0x7ff8cd532b20>\nwakefield_session = <Response [200]>, response = <Response [200]>\nsoup = \n<!DOCTYPE html >\n\n<html lang=\"en\">\n<head>\n<meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"/>\n<meta content=\"Micro...e?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=3&amp;cb=1552625337\" type=\"text/javascript\"></script></body>\n</html>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # UPRN passed in as an argument\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # cookies = {\n        #    'visid_incap_2049675':    'xZCc/tFgSzaFmZD7XkN3koJGuGMAAAAAQUIPAAAAAAB7QGC8d+Jmlk0i3y06Zer6',\n        #    'WSS_FullScreenMode':     'false',\n        #    'incap_ses_1184_2049675': 'a2ZQQ9lCM3wa4+23mWpuEHnAuGMAAAAAfl4ebLXAvItl6dCfbMEWoQ==',\n        # }\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36\"\n        }\n    \n        params = {\n            \"uprn\": user_uprn,\n        }\n    \n        s = requests.Session()  # gets cookies and keeps them\n    \n        wakefield_session = s.get(\"https://www.wakefield.gov.uk/\", headers=headers)\n        print(wakefield_session)\n        # Make a GET for the data with correct params and cookies\n        response = s.get(\n            \"https://www.wakefield.gov.uk/site/Where-I-Live-Results\",\n            params=params,\n            headers=headers,\n            verify=False,\n        )\n    \n        # Have BS4 process the page\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n        data = {\"bins\": []}\n    \n        # Start a tuple for collections with (TYPE:DATE). Add the first for the bin types since they're separate\n        # elements on the page. All dates are parsed from text to datetime\n        collections = [\n            (\n                \"Household waste\",\n                datetime.strptime(\n>                   soup.select(\n                        \"#ctl00_PlaceHolderMain_Waste_output > div:nth-child(4) > \"\n                        \"div:nth-child(3) > div:nth-child(2)\"\n                    )[0].text,\n                    \"%d/%m/%Y\",\n                ),\n            ),\n            (\n                \"Mixed recycling\",\n                datetime.strptime(\n                    soup.select(\n                        \"#ctl00_PlaceHolderMain_Waste_output > div:nth-child(6) > \"\n                        \"div:nth-child(3) > div:nth-child(2)\"\n                    )[0].text,\n                    \"%d/%m/%Y\",\n                ),\n            ),\n        ]\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/WakefieldCityCouncil.py:59: IndexError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"IndexError: list index out of range","statusTrace":"fixturefunc = <function scrape_step at 0x7ff8d6ae71f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[WakefieldCityCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7ff8cd3f4fa0>, 'council': 'WakefieldCityCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.8/lib/python3.8/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <WakefieldCityCouncil.CouncilClass object at 0x7ff8cd5325b0>\npage = <Response [200]>, kwargs = {'paon': None, 'postcode': None, 'uprn': None}\nuser_uprn = None\nheaders = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\nparams = {'uprn': None}\ns = <requests.sessions.Session object at 0x7ff8cd532b20>\nwakefield_session = <Response [200]>, response = <Response [200]>\nsoup = \n<!DOCTYPE html >\n\n<html lang=\"en\">\n<head>\n<meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"/>\n<meta content=\"Micro...e?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=3&amp;cb=1552625337\" type=\"text/javascript\"></script></body>\n</html>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # UPRN passed in as an argument\n        user_uprn = kwargs.get(\"uprn\")\n        check_uprn(user_uprn)\n    \n        # cookies = {\n        #    'visid_incap_2049675':    'xZCc/tFgSzaFmZD7XkN3koJGuGMAAAAAQUIPAAAAAAB7QGC8d+Jmlk0i3y06Zer6',\n        #    'WSS_FullScreenMode':     'false',\n        #    'incap_ses_1184_2049675': 'a2ZQQ9lCM3wa4+23mWpuEHnAuGMAAAAAfl4ebLXAvItl6dCfbMEWoQ==',\n        # }\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36\"\n        }\n    \n        params = {\n            \"uprn\": user_uprn,\n        }\n    \n        s = requests.Session()  # gets cookies and keeps them\n    \n        wakefield_session = s.get(\"https://www.wakefield.gov.uk/\", headers=headers)\n        print(wakefield_session)\n        # Make a GET for the data with correct params and cookies\n        response = s.get(\n            \"https://www.wakefield.gov.uk/site/Where-I-Live-Results\",\n            params=params,\n            headers=headers,\n            verify=False,\n        )\n    \n        # Have BS4 process the page\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        soup.prettify()\n        data = {\"bins\": []}\n    \n        # Start a tuple for collections with (TYPE:DATE). Add the first for the bin types since they're separate\n        # elements on the page. All dates are parsed from text to datetime\n        collections = [\n            (\n                \"Household waste\",\n                datetime.strptime(\n>                   soup.select(\n                        \"#ctl00_PlaceHolderMain_Waste_output > div:nth-child(4) > \"\n                        \"div:nth-child(3) > div:nth-child(2)\"\n                    )[0].text,\n                    \"%d/%m/%Y\",\n                ),\n            ),\n            (\n                \"Mixed recycling\",\n                datetime.strptime(\n                    soup.select(\n                        \"#ctl00_PlaceHolderMain_Waste_output > div:nth-child(6) > \"\n                        \"div:nth-child(3) > div:nth-child(2)\"\n                    )[0].text,\n                    \"%d/%m/%Y\",\n                ),\n            ),\n        ]\nE       IndexError: list index out of range\n\nuk_bin_collection/uk_bin_collection/councils/WakefieldCityCouncil.py:59: IndexError","steps":[{"name":"Given the council: WakefieldCityCouncil","time":{"start":1677458601596,"stop":1677458601596,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from WakefieldCityCouncil","time":{"start":1677458601597,"stop":1677458607459,"duration":5862},"status":"failed","statusMessage":"list index out of range","statusTrace":"IndexError: list index out of range\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az484-251"},{"name":"thread","value":"2606-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"aafbf6d29ea00377.json","parameterValues":[]}