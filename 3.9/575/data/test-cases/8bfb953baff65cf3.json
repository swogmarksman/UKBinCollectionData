{"uid":"8bfb953baff65cf3","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1677700519181,"stop":1677700521410,"duration":2229},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 3 (char 2)","statusTrace":"fixturefunc = <function scrape_step at 0x7f08e4cb5280>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f08d76b2b20>, 'council': 'CroydonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:253: in parse_data\n    address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:144: in get_address_id\n    json_response = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f08e7550820>\ns = '\\t\\t<!DOCTYPE html>\\n\\t\\t<html lang=\"en_GB\">\\n\\t\\t<head>\\n\\t\\t\\t<script type=\"text/javascript\">\\n\\t\\t\\t\\t// Notice ho...rf\":\"45a0de66772a3c141afcf4a7180d6ef123d3431a\"}}});\\r\\n\\t\\t});\\r\\n\\t</script>\\r\\n\\t\\t\\t\\t\\t</main>\\n\\t\\t\\t</div>\\n\\t\\t'\nidx = 2\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 3 (char 2)\n\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 3 (char 2)","statusTrace":"fixturefunc = <function scrape_step at 0x7f08e4cb5280>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f08d76b2b20>, 'council': 'CroydonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:253: in parse_data\n    address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:144: in get_address_id\n    json_response = json.loads(response.text)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f08e7550820>\ns = '\\t\\t<!DOCTYPE html>\\n\\t\\t<html lang=\"en_GB\">\\n\\t\\t<head>\\n\\t\\t\\t<script type=\"text/javascript\">\\n\\t\\t\\t\\t// Notice ho...rf\":\"45a0de66772a3c141afcf4a7180d6ef123d3431a\"}}});\\r\\n\\t\\t});\\r\\n\\t</script>\\r\\n\\t\\t\\t\\t\\t</main>\\n\\t\\t\\t</div>\\n\\t\\t'\nidx = 2\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 3 (char 2)\n\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1677700519181,"stop":1677700519182,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from CroydonCouncil","time":{"start":1677700519182,"stop":1677700521410,"duration":2228},"status":"failed","statusMessage":"Expecting value: line 1 column 3 (char 2)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 3 (char 2)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az167-136"},{"name":"thread","value":"2587-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":9},"items":[{"uid":"d490c0c4dbad1c05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/573//#testresult/d490c0c4dbad1c05","status":"passed","time":{"start":1677646256527,"stop":1677646264738,"duration":8211}},{"uid":"4dde495414f6e0f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/572//#testresult/4dde495414f6e0f6","status":"passed","time":{"start":1677635690823,"stop":1677635696174,"duration":5351}},{"uid":"8129fb720f7942d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/568//#testresult/8129fb720f7942d","status":"passed","time":{"start":1677580145973,"stop":1677580152333,"duration":6360}},{"uid":"b2269e650c09fed2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/566//#testresult/b2269e650c09fed2","status":"passed","time":{"start":1677548733428,"stop":1677548745538,"duration":12110}},{"uid":"36bb91fe98fb957a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/564//#testresult/36bb91fe98fb957a","status":"passed","time":{"start":1677485685088,"stop":1677485691025,"duration":5937}},{"uid":"95689d421585d116","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/562//#testresult/95689d421585d116","status":"passed","time":{"start":1677462349939,"stop":1677462354499,"duration":4560}},{"uid":"53c951fdf438fdcc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/561//#testresult/53c951fdf438fdcc","status":"passed","time":{"start":1677458359449,"stop":1677458364421,"duration":4972}},{"uid":"6c846534e856a1fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/559//#testresult/6c846534e856a1fb","status":"passed","time":{"start":1677455883079,"stop":1677455887761,"duration":4682}}]},"tags":[]},"source":"8bfb953baff65cf3.json","parameterValues":[]}