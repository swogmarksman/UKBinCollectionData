{"uid":"73eb10e51eb2e495","name":"Validate Council Output [SouthTynesideCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"efde6c2c8e15955ad5fa48845f3c2c06","time":{"start":1677646368230,"stop":1677646370201,"duration":1971},"status":"failed","statusMessage":"KeyError: 'result'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2647be31f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f263dde45b0>, 'council': 'SouthTynesideCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:75: in parse_data\n    uprn = get_address_uprn(user_postcode, user_paon, api_url)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npostcode = 'NE33 3JW', paon = '1'\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\n\n    def get_address_uprn(postcode: str, paon: str, api_url: str) -> str:\n        \"\"\"\n        Gets the UPRN and address in desired format\n            :rtype: str\n            :param postcode: Postcode to use\n            :param paon: House number to use\n            :param api_url: API to POST\n            :return: UPRN and postcode in str format\n        \"\"\"\n        addr = \"\"\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1642260173663\",\n                \"method\": \"ictGetAddressList\",\n                \"params\": {\"postcode\": f\"{postcode.replace(' ', '')}\", \"localonly\": \"true\"},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.post(api_url, data=payload, headers=headers)\n    \n        json_response = json.loads(response.content)\n>       results = json_response[\"result\"]\nE       KeyError: 'result'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:31: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"KeyError: 'result'","statusTrace":"fixturefunc = <function scrape_step at 0x7f2647be31f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthTynesideCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f263dde45b0>, 'council': 'SouthTynesideCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:75: in parse_data\n    uprn = get_address_uprn(user_postcode, user_paon, api_url)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npostcode = 'NE33 3JW', paon = '1'\napi_url = 'https://www.southtyneside.gov.uk/apiserver/ajaxlibrary/'\n\n    def get_address_uprn(postcode: str, paon: str, api_url: str) -> str:\n        \"\"\"\n        Gets the UPRN and address in desired format\n            :rtype: str\n            :param postcode: Postcode to use\n            :param paon: House number to use\n            :param api_url: API to POST\n            :return: UPRN and postcode in str format\n        \"\"\"\n        addr = \"\"\n        payload = json.dumps(\n            {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"1642260173663\",\n                \"method\": \"ictGetAddressList\",\n                \"params\": {\"postcode\": f\"{postcode.replace(' ', '')}\", \"localonly\": \"true\"},\n            }\n        )\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.post(api_url, data=payload, headers=headers)\n    \n        json_response = json.loads(response.content)\n>       results = json_response[\"result\"]\nE       KeyError: 'result'\n\nuk_bin_collection/uk_bin_collection/councils/SouthTynesideCouncil.py:31: KeyError","steps":[{"name":"Given the council: SouthTynesideCouncil","time":{"start":1677646368231,"stop":1677646368231,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from SouthTynesideCouncil","time":{"start":1677646368231,"stop":1677646370201,"duration":1970},"status":"failed","statusMessage":"'result'","statusTrace":"KeyError: 'result'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az402-244"},{"name":"thread","value":"2536-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"cf01a5ae93a908d4","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/572//#testresult/cf01a5ae93a908d4","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1677635882923,"stop":1677635885113,"duration":2190}},{"uid":"f333fd4fe015eb48","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/568//#testresult/f333fd4fe015eb48","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1677580408314,"stop":1677580411161,"duration":2847}},{"uid":"806d2b59ce826570","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/566//#testresult/806d2b59ce826570","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1677548918834,"stop":1677548921980,"duration":3146}},{"uid":"ed2d2bd596966eaa","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/564//#testresult/ed2d2bd596966eaa","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1677485809511,"stop":1677485812471,"duration":2960}},{"uid":"9638459e1d4a145","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/562//#testresult/9638459e1d4a145","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1677462509648,"stop":1677462511477,"duration":1829}},{"uid":"164a7e521c4dd9a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/561//#testresult/164a7e521c4dd9a3","status":"failed","statusDetails":"KeyError: 'result'","time":{"start":1677458577919,"stop":1677458580252,"duration":2333}},{"uid":"1054ada05eca7f8c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/559//#testresult/1054ada05eca7f8c","status":"failed","statusDetails":"AttributeError: 'Context' object has no attribute 'parse_result'","time":{"start":1677455972467,"stop":1677455974237,"duration":1770}}]},"tags":[]},"source":"73eb10e51eb2e495.json","parameterValues":[]}