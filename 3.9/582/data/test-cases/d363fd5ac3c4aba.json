{"uid":"d363fd5ac3c4aba","name":"Validate Council Output [CroydonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"cc336f6dd92ae6b8042805cd6f13d13e","time":{"start":1677787785200,"stop":1677787790461,"duration":5261},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f3a958f4280>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3a87ec75e0>, 'council': 'CroydonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f3a87dea5e0>\npage = <Response [200]>\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None}\ns = <requests.sessions.Session object at 0x7f3a87dea610>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'acdad2412bf6457f04a47a622cbcf17a2b1d4d71', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n>                   e.find(\"div\", {\"class\": \"bin-collection-next\"})\n                    .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:273: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'attrs'","statusTrace":"fixturefunc = <function scrape_step at 0x7f3a958f4280>\nrequest = <FixtureRequest for <Function test_scenario_outline[CroydonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f3a87ec75e0>, 'council': 'CroydonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CroydonCouncil.CouncilClass object at 0x7f3a87dea5e0>\npage = <Response [200]>\nkwargs = {'paon': '13', 'postcode': 'SE25 5DW', 'uprn': None}\ns = <requests.sessions.Session object at 0x7f3a87dea610>\nbase_url = 'https://service.croydon.gov.uk', paon = '13', postcode = 'SE25 5DW'\ncsrf_token = 'acdad2412bf6457f04a47a622cbcf17a2b1d4d71', address_id = '96383'\ncollection_data = '<input type=\"hidden\" id=\"page_title\" value=\"Check your bin collections - Croydon Council\"><script type=\"text/javascri...v>\\n</div></div></div></div></div>\\n\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n'\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        requests.packages.urllib3.disable_warnings()\n        s = requests.session()\n        base_url = \"https://service.croydon.gov.uk\"\n        paon = kwargs.get(\"paon\")\n        postcode = kwargs.get(\"postcode\")\n        check_paon(paon)\n        check_postcode(postcode)\n    \n        # Firstly, get a CSRF (cross-site request forgery) token\n        csrf_token = get_csrf_token(s, base_url)\n        # Next, get the address_id\n        address_id = get_address_id(s, base_url, csrf_token, postcode, paon)\n        # Finally, use the address_id to get the collection data\n        collection_data = get_collection_data(s, base_url, csrf_token, address_id)\n        if collection_data != \"\":\n            soup = BeautifulSoup(collection_data, features=\"html.parser\")\n            soup.prettify()\n    \n            # Find the list elements\n            collection_record_elements = soup.find_all(\n                \"div\", {\"class\": \"listing_template_record\"}\n            )\n    \n            # Form a JSON wrapper\n            data = {\"bins\": []}\n    \n            for e in collection_record_elements:\n                collection_type = e.find_all(\n                    \"div\", {\"class\": \"fragment_presenter_template_show\"}\n                )[0].text.strip()\n                collection_date = (\n>                   e.find(\"div\", {\"class\": \"bin-collection-next\"})\n                    .attrs[\"data-current_value\"]\n                    .strip()\n                )\nE               AttributeError: 'NoneType' object has no attribute 'attrs'\n\nuk_bin_collection/uk_bin_collection/councils/CroydonCouncil.py:273: AttributeError","steps":[{"name":"Given the council: CroydonCouncil","time":{"start":1677787785200,"stop":1677787785201,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from CroydonCouncil","time":{"start":1677787785201,"stop":1677787790461,"duration":5260},"status":"failed","statusMessage":"'NoneType' object has no attribute 'attrs'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'attrs'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az461-708"},{"name":"thread","value":"2647-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":12},"items":[{"uid":"53aaad2353c7b68a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/579//#testresult/53aaad2353c7b68a","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 3 (char 2)","time":{"start":1677721895830,"stop":1677721898252,"duration":2422}},{"uid":"970f69c30409a9ba","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/578//#testresult/970f69c30409a9ba","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 3 (char 2)","time":{"start":1677707402853,"stop":1677707404854,"duration":2001}},{"uid":"8bfb953baff65cf3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/575//#testresult/8bfb953baff65cf3","status":"failed","statusDetails":"json.decoder.JSONDecodeError: Expecting value: line 1 column 3 (char 2)","time":{"start":1677700519181,"stop":1677700521410,"duration":2229}},{"uid":"d490c0c4dbad1c05","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/573//#testresult/d490c0c4dbad1c05","status":"passed","time":{"start":1677646256527,"stop":1677646264738,"duration":8211}},{"uid":"4dde495414f6e0f6","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/572//#testresult/4dde495414f6e0f6","status":"passed","time":{"start":1677635690823,"stop":1677635696174,"duration":5351}},{"uid":"8129fb720f7942d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/568//#testresult/8129fb720f7942d","status":"passed","time":{"start":1677580145973,"stop":1677580152333,"duration":6360}},{"uid":"b2269e650c09fed2","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/566//#testresult/b2269e650c09fed2","status":"passed","time":{"start":1677548733428,"stop":1677548745538,"duration":12110}},{"uid":"36bb91fe98fb957a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/564//#testresult/36bb91fe98fb957a","status":"passed","time":{"start":1677485685088,"stop":1677485691025,"duration":5937}},{"uid":"95689d421585d116","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/562//#testresult/95689d421585d116","status":"passed","time":{"start":1677462349939,"stop":1677462354499,"duration":4560}},{"uid":"53c951fdf438fdcc","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/561//#testresult/53c951fdf438fdcc","status":"passed","time":{"start":1677458359449,"stop":1677458364421,"duration":4972}},{"uid":"6c846534e856a1fb","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/559//#testresult/6c846534e856a1fb","status":"passed","time":{"start":1677455883079,"stop":1677455887761,"duration":4682}}]},"tags":[]},"source":"d363fd5ac3c4aba.json","parameterValues":[]}