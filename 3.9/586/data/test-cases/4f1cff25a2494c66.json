{"uid":"4f1cff25a2494c66","name":"Validate Council Output [StHelensBC]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"aefb4666f5cfa7265d9db53c16df38b6","time":{"start":1677894420138,"stop":1677894420923,"duration":785},"status":"failed","statusMessage":"ValueError: invalid literal for int() with base 10: 'not'","statusTrace":"fixturefunc = <function scrape_step at 0x7f880600f1f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f87f8a2f550>, 'council': 'StHelensBC'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StHelensBC.CouncilClass object at 0x7f87f87ed340>\npage = <Response [200]>, kwargs = {'paon': None, 'postcode': None, 'uprn': None}\nsoup = <!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"/>\n<meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"/...ecure.sthelens.net/website/sthelenscouncilfiles.nsf/Lookup/bootstrap3menu/$file/menu.min.js\"></script>\n</body>\n</html>\n\ndata = {'bins': [{'collectionDate': '10/03/2023', 'type': 'Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)'}, ...2023', 'type': 'Green Bin (garden waste)'}, {'collectionDate': '07/04/2023', 'type': 'Green Bin (garden waste)'}, ...]}\nresults = []\ntable = <table class=\"multitable\"><caption>Collection dates for <span>15 THE MEADS,</span> <span>ECCLESTON PARK,</span> <span>...i 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr></tbody></table>\ntable_body = <tbody><tr><th scope=\"row\"><b>Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)</b></th><td data-title=\"N..._col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr></tbody>\nrows = [<tr><th scope=\"row\"><b>Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)</b></th><td data-title=\"Next\"><...=\"table_col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr>]\nrow = <tr><th scope=\"row\"><b>Brown Bin (non-recyclable waste)</b></th><td data-title=\"Next\"><div class=\"table_col\">Fri 17 Ma...s=\"table_col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        results = []\n        table = soup.find(\"table\", {\"class\": \"multitable\"})\n        table_body = table.find(\"tbody\")\n        rows = table_body.find_all(\"tr\")\n    \n        for row in rows:\n            row_values = [text.text for text in row.contents]\n            bin_type = row_values[0]\n            for i in range(1, 4):\n                # Convert date to list and remove day part\n                date_as_list = row_values[i].split(\" \")\n                date_as_list.pop(0)\n    \n                # Add extra padding if the number is 1-9 -> 01-09\n>               if int(date_as_list[0]) < 10:\nE               ValueError: invalid literal for int() with base 10: 'not'\n\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:35: ValueError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"ValueError: invalid literal for int() with base 10: 'not'","statusTrace":"fixturefunc = <function scrape_step at 0x7f880600f1f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[StHelensBC]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f87f8a2f550>, 'council': 'StHelensBC'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StHelensBC.CouncilClass object at 0x7f87f87ed340>\npage = <Response [200]>, kwargs = {'paon': None, 'postcode': None, 'uprn': None}\nsoup = <!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\"/>\n<meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"/...ecure.sthelens.net/website/sthelenscouncilfiles.nsf/Lookup/bootstrap3menu/$file/menu.min.js\"></script>\n</body>\n</html>\n\ndata = {'bins': [{'collectionDate': '10/03/2023', 'type': 'Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)'}, ...2023', 'type': 'Green Bin (garden waste)'}, {'collectionDate': '07/04/2023', 'type': 'Green Bin (garden waste)'}, ...]}\nresults = []\ntable = <table class=\"multitable\"><caption>Collection dates for <span>15 THE MEADS,</span> <span>ECCLESTON PARK,</span> <span>...i 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr></tbody></table>\ntable_body = <tbody><tr><th scope=\"row\"><b>Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)</b></th><td data-title=\"N..._col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr></tbody>\nrows = [<tr><th scope=\"row\"><b>Recycling (Black Box, Blue Bag, Pink/White Bag and Food Caddy)</b></th><td data-title=\"Next\"><...=\"table_col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr>]\nrow = <tr><th scope=\"row\"><b>Brown Bin (non-recyclable waste)</b></th><td data-title=\"Next\"><div class=\"table_col\">Fri 17 Ma...s=\"table_col\">Fri 31 Mar 2023</div></td><td data-title=\"3rd\"><div class=\"table_col\">Dates not allocated</div></td></tr>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        # Make a BS4 object\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        data = {\"bins\": []}\n        results = []\n        table = soup.find(\"table\", {\"class\": \"multitable\"})\n        table_body = table.find(\"tbody\")\n        rows = table_body.find_all(\"tr\")\n    \n        for row in rows:\n            row_values = [text.text for text in row.contents]\n            bin_type = row_values[0]\n            for i in range(1, 4):\n                # Convert date to list and remove day part\n                date_as_list = row_values[i].split(\" \")\n                date_as_list.pop(0)\n    \n                # Add extra padding if the number is 1-9 -> 01-09\n>               if int(date_as_list[0]) < 10:\nE               ValueError: invalid literal for int() with base 10: 'not'\n\nuk_bin_collection/uk_bin_collection/councils/StHelensBC.py:35: ValueError","steps":[{"name":"Given the council: StHelensBC","time":{"start":1677894420138,"stop":1677894420139,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from StHelensBC","time":{"start":1677894420139,"stop":1677894420923,"duration":784},"status":"failed","statusMessage":"invalid literal for int() with base 10: 'not'","statusTrace":"ValueError: invalid literal for int() with base 10: 'not'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az461-708"},{"name":"thread","value":"2594-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":14,"unknown":0,"total":15},"items":[{"uid":"12dc36825fd6a767","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/585//#testresult/12dc36825fd6a767","status":"passed","time":{"start":1677867164141,"stop":1677867165045,"duration":904}},{"uid":"a2bdc2e285c5cc04","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/583//#testresult/a2bdc2e285c5cc04","status":"passed","time":{"start":1677814444071,"stop":1677814444589,"duration":518}},{"uid":"d13bb97ac6828225","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/582//#testresult/d13bb97ac6828225","status":"passed","time":{"start":1677788020628,"stop":1677788021435,"duration":807}},{"uid":"7252a56aa4b5dea0","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/579//#testresult/7252a56aa4b5dea0","status":"passed","time":{"start":1677722089207,"stop":1677722090051,"duration":844}},{"uid":"a59b0a5c18b26422","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/578//#testresult/a59b0a5c18b26422","status":"passed","time":{"start":1677707523610,"stop":1677707524269,"duration":659}},{"uid":"1ee9e2de4d0f4f01","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/575//#testresult/1ee9e2de4d0f4f01","status":"passed","time":{"start":1677700618453,"stop":1677700619110,"duration":657}},{"uid":"2c47fff280975861","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/573//#testresult/2c47fff280975861","status":"passed","time":{"start":1677646370241,"stop":1677646370798,"duration":557}},{"uid":"7544aafa3b533490","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/572//#testresult/7544aafa3b533490","status":"passed","time":{"start":1677635885154,"stop":1677635885650,"duration":496}},{"uid":"9362ae59d426ee73","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/568//#testresult/9362ae59d426ee73","status":"passed","time":{"start":1677580411200,"stop":1677580412047,"duration":847}},{"uid":"622af1e50695692a","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/566//#testresult/622af1e50695692a","status":"passed","time":{"start":1677548922077,"stop":1677548922959,"duration":882}},{"uid":"7e60656af648751d","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/564//#testresult/7e60656af648751d","status":"passed","time":{"start":1677485812568,"stop":1677485813472,"duration":904}},{"uid":"826f85a83083653f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/562//#testresult/826f85a83083653f","status":"passed","time":{"start":1677462511555,"stop":1677462512070,"duration":515}},{"uid":"9a4067d03890079b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/561//#testresult/9a4067d03890079b","status":"passed","time":{"start":1677458580316,"stop":1677458580977,"duration":661}},{"uid":"c54dc583df8a3b52","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/559//#testresult/c54dc583df8a3b52","status":"passed","time":{"start":1677455974266,"stop":1677455974777,"duration":511}}]},"tags":[]},"source":"4f1cff25a2494c66.json","parameterValues":[]}