{"uid":"2f0707a39410f7ce","name":"Validate Council Output [BoltonCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"c59a7b02ce88bbad9f9cdf4a119aec6c","time":{"start":1677894154151,"stop":1677894162390,"duration":8239},"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f880600f1f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BoltonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f87f87edc70>, 'council': 'BoltonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BoltonCouncil.py:22: in parse_data\n    json_data = json.loads(page.text)[\"Results\"]\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f8808919b80>\ns = 'ERROR 10006: IntGetData - getLocalInfo: System.Web.Services.Protocols.SoapException: Server was unable to process req... String layerToSearch, String uid, Double x, Double y, Double distance)\\n   --- End of inner exception stack trace ---'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"fixturefunc = <function scrape_step at 0x7f880600f1f0>\nrequest = <FixtureRequest for <Function test_scenario_outline[BoltonCouncil]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7f87f87edc70>, 'council': 'BoltonCouncil'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.9/lib/python3.9/site-packages/_pytest/fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:59: in scrape_step\n    raise(err)\nuk_bin_collection/tests/step_defs/test_validate_council.py:55: in scrape_step\n    context.parse_result = collect_data.main(args)\nuk_bin_collection/uk_bin_collection/collect_data.py:67: in main\n    return client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:23: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:57: in template_method\n    bin_data_dict = self.parse_data(\nuk_bin_collection/uk_bin_collection/councils/BoltonCouncil.py:22: in parse_data\n    json_data = json.loads(page.text)[\"Results\"]\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f8808919b80>\ns = 'ERROR 10006: IntGetData - getLocalInfo: System.Web.Services.Protocols.SoapException: Server was unable to process req... String layerToSearch, String uid, Double x, Double y, Double distance)\\n   --- End of inner exception stack trace ---'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/json/decoder.py:355: JSONDecodeError","steps":[{"name":"Given the council: BoltonCouncil","time":{"start":1677894154152,"stop":1677894154152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"When we scrape the data from BoltonCouncil","time":{"start":1677894154152,"stop":1677894162390,"duration":8238},"status":"failed","statusMessage":"Expecting value: line 1 column 1 (char 0)","statusTrace":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"fv-az461-708"},{"name":"thread","value":"2594-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results in /outputs"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":14,"unknown":0,"total":15},"items":[{"uid":"c07bd04c86ed6a88","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/585//#testresult/c07bd04c86ed6a88","status":"passed","time":{"start":1677866983548,"stop":1677866988274,"duration":4726}},{"uid":"44817af83ae2dd13","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/583//#testresult/44817af83ae2dd13","status":"passed","time":{"start":1677814235015,"stop":1677814238847,"duration":3832}},{"uid":"f417b7bb3d9d38d1","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/582//#testresult/f417b7bb3d9d38d1","status":"passed","time":{"start":1677787761840,"stop":1677787764256,"duration":2416}},{"uid":"265f8ba7d4832f03","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/579//#testresult/265f8ba7d4832f03","status":"passed","time":{"start":1677721874558,"stop":1677721877124,"duration":2566}},{"uid":"4b5f4c4fbc369d6b","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/578//#testresult/4b5f4c4fbc369d6b","status":"passed","time":{"start":1677707382702,"stop":1677707385623,"duration":2921}},{"uid":"5e0c994941a7470c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/575//#testresult/5e0c994941a7470c","status":"passed","time":{"start":1677700501021,"stop":1677700503520,"duration":2499}},{"uid":"d3c1d19fbc26a62f","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/573//#testresult/d3c1d19fbc26a62f","status":"passed","time":{"start":1677646238084,"stop":1677646241451,"duration":3367}},{"uid":"ed9f3e03b9f2a97c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/572//#testresult/ed9f3e03b9f2a97c","status":"passed","time":{"start":1677635669242,"stop":1677635672981,"duration":3739}},{"uid":"6709b8bde33094a3","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/568//#testresult/6709b8bde33094a3","status":"passed","time":{"start":1677580124075,"stop":1677580128286,"duration":4211}},{"uid":"260c9e2e162b2a70","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/566//#testresult/260c9e2e162b2a70","status":"passed","time":{"start":1677548710881,"stop":1677548713648,"duration":2767}},{"uid":"2c0854ff6a3e8c12","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/564//#testresult/2c0854ff6a3e8c12","status":"passed","time":{"start":1677485658314,"stop":1677485660887,"duration":2573}},{"uid":"5e8bbceda0be735c","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/562//#testresult/5e8bbceda0be735c","status":"passed","time":{"start":1677462318437,"stop":1677462320797,"duration":2360}},{"uid":"48c9342d347cd129","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/561//#testresult/48c9342d347cd129","status":"passed","time":{"start":1677458338538,"stop":1677458340919,"duration":2381}},{"uid":"9466d98d0bd38178","reportUrl":"https://robbrad.github.io/UKBinCollectionData/3.9/559//#testresult/9466d98d0bd38178","status":"passed","time":{"start":1677455865291,"stop":1677455868377,"duration":3086}}]},"tags":[]},"source":"2f0707a39410f7ce.json","parameterValues":[]}